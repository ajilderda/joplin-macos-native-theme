.rli-noteList {
  --notelist--Background: var(--g-primary-Background);
  --notelist--item--Line-height: 3.6rem;

  > div > div {
    background-color: var(--notelist--Background);

    // overwrite background-color behind search bar
    > div:first-child {
      background-color: transparent;
      height: auto;
      width: 100%;
      padding: 1.2rem 0.6rem 1.2rem 1.2rem;
    }

    div:nth-child(2) > div {
      //background-color: transparent !important;
      color: var(--g-textColor) !important;
    }
  }

  .search-bar {
    position: relative;

    input[type="text"] {
      @include focusRing;

      border: 1px solid var(--g-separatorColor);
      background: var(--g-controlBackgroundColor);
      border-radius: 0.6rem;
      color: var(--g-controlTextColor);
      font-size: 1.3rem;
      height: 2.8rem;
      max-height: none;
      padding: 0 0 0 3rem !important;
      width: 100%;
      flex: 1 0 100%;

      // reserve space for reset-button only when input is not empty
      &:not([value=""]) {
        padding-right: 2.5rem !important;
      }

      &::placeholder {
        color: var(--g-tertiaryLabelColor);
      }
    }

    &::after {
      @include icon(magnifyingglass);
      transform: translateY(-50%) scale(var(--s-icon-size-factor, 1));

      position: absolute;
      left: 0;
      color: var(--g-secondaryLabelColor);
      font-size: calc(var(--u-font-family-icons, 1) * 1.7rem);
      font-weight: normal !important;
      top: 50%;
      left: 0.8rem;
      pointer-events: none;
    }

    // .icon-search is replaced by a crossmark icon after input (which is not
    // what we want). That's why we hide this element and use a pseudo-element
    // with the icon on .search-bar in stead.
    .icon-search {
      display: none;
    }

    // cross when input value !== empty
    .fa-times {
      font-size: 13px;
      font-weight: normal;

      &::after {
        @include icon(xmark-circle-fill);
        color: var(--g-secondaryLabelColor);
        display: block;
        position: absolute;
        right: 0.7rem;
        top: 50%;
        transform: translateY(-50%) scale(var(--s-icon-size-factor, 1));
      }
    }

    // 'add'-buttons next to search
    + div {
      .new-todo-button,
      .new-note-button {
        background: none;
        border-radius: 0.6rem;
        cursor: default;
        margin-left: 0;
        max-height: none;
        max-width: none;
        height: 2.6rem;
        width: 2.6rem;

        &:focus-visible,
        &:hover {
          background: var(--g-quaternaryLabelColor);
        }

        span:before {
          color: var(--g-secondaryLabelColor);
          display: block;
          font-size: var(--g-font-size-2);
          font-weight: 500;
          -webkit-font-smoothing: antialiased;
          transform: translateY(0.05rem);
        }
      }

      .new-note-button {
        margin-left: 0.1rem;
      }

      .new-todo-button span:before {
        @include icon(checkmark-circle);
      }

      .new-note-button span:before {
        @include icon(square-and-pencil);
      }
    }
  }

  .sort-order-field-button {
    border: none;
    cursor: default;
    border-radius: 0.6rem;
    background-color: transparent;
    
    .fas,
    .far {
      font-size: var(--g-font-size-2);
      font-weight: 500;
      color: var(--g-secondaryLabelColor);
    }

    // Sort by:
    // updated date
    .fa-calendar-alt::before {
      @include icon(clock);
    }
    
    // created date
    .fa-calendar-plus::before {
      @include icon(calendar);
    }
    
    // title
    .fa-font::before {
      @include icon(character);
    }
    
    // custom
    .fa-wrench::before {
      @include icon(person);
    }

    &:focus-visible,
    &:hover {
      background: var(--g-quaternaryLabelColor);
    }
  }

  .sort-order-reverse-button {
    background: var(--notelist--Background) !important;
    border: none;
    border-radius: 50%;
    height: 1.2rem !important;
    margin-left: -11px !important;
    min-height: 0;
    padding: 0;
    position: relative;
    top: 13px !important;
    width: 1.2rem;
    cursor: default;

    .fa-long-arrow-alt-down,
    .fa-long-arrow-alt-up {
      &::before {
        color: var(--g-secondaryLabelColor);
        font-weight: 700;
        font-size: 10px;
      }
    }

    .fa-long-arrow-alt-up::before {
      @include icon(arrow-up-circle-fill);
    }

    .fa-long-arrow-alt-down::before {
      @include icon(arrow-down-circle-fill);
    }
  }

  // note list + items
  .note-list {
    padding: 0 1rem 1rem;
    width: auto !important;
    overflow: hidden overlay !important;

    // remove last border in notelist
    div:nth-last-of-type(2):not(:empty):before {
      content: none;
    }
  }

  .todo-list-item,
  .note-list-item {
    border-radius: 0.4rem;
    height: auto;
    line-height: var(--notelist--item--Line-height);

    // remove divider
    &.odd::before,
    &.even::before {
      content: var(--u-note-list-dividers, "");
    }

    &.odd {
      background: var(
        --u-note-list-zebra-color-odd,
        var(--g-alternatingContentBackgroundColorsOdd)
      );
    }
    &.even {
      background: var(
        --u-note-list-zebra-color-even,
        var(--g-alternatingContentBackgroundColorsEven)
      );
    }

    >div>div {
      font-size: 1.2rem !important;
    }

    a {
      padding: 0 1rem !important;
      // font-size: 1.2rem !important;
      // color: var(--g-textColor) !important;
      color: var(--g-labelColor) !important;
    }

    .fa-share-square {
      order: 1;
      margin-left: auto;
      &::before {
        @include icon(arrow-up-right-square-fill);
        color: var(--s-accentColor);
        font-weight: 400;
      }
    }

    mark {
      background: var(--g-systemYellow);
      color: var(--g-textColorDark) !important;
      border-radius: 0.2rem;
    }

    &>.content.-selected {
      background: var(--s-accentColor--selected) !important;

      a,
      span {
        color: var(--g-alternateSelectedControlTextColor) !important;
      }

      // search highlight
      mark {
        background: var(--g-systemYellow);
        color: var(--g-textColorDark) !important;
      }

      &:before {
        top: -1px;
        bottom: auto;
        border-color: var(--notelist--Background);
      }

      .fa-share-square::before {
        color: var(--g-alternateSelectedControlTextColor);
      }

      + .selected {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
        // a hack for removing the rounded corners in between items when having multiple items selected
        margin-top: -0.4rem;
        padding-top: 0.4rem;

        &:before {
          border-color: transparent;
        }

        &:after {
          content: "";
          background-color: var(--g-separatorColor);
          position: absolute;
          height: 0.1rem;
          top: 0.4rem;
          left: 1rem;
          right: 1rem;
        }
      }

      &:first-of-type {
        border-top-left-radius: 0.4rem;
        border-top-right-radius: 0.4rem;
      }
      &:last-of-type {
        border-bottom-right-radius: 0.4rem;
        border-bottom-right-radius: 0.4rem;
      }
    }

    &::before {
      border-color: var(--g-separatorColor);
      left: 10px;
      right: 0px;
      width: auto;
    }

    > a > span {
      color: inherit;
      font-family: var(--s-font-family-system);
      overflow: hidden;
      text-overflow: ellipsis;
    }
  }

  .todo-list-item {
    > div {
      padding-left: 1rem !important;
    }

    input {
      align-items: center;
      appearance: none;
      border-radius: 50%;
      border: 0.1rem solid var(--g-tertiaryLabelColor);
      display: flex;
      height: 1.5rem;
      justify-content: center;
      margin: 0 -0.3rem -0.2rem 0 !important;
      position: relative;
      width: 1.5rem;

      &:checked {
        background-color: var(--s-controlAccentColor);
        border-color: transparent;

        &:after {
          @include icon(checkmark);
          position: absolute;
          color: var(--g-alternateSelectedControlTextColor);
          font-size: 0.9rem;
        }
      }
    }

    &.selected input {
      border-color: hsla(var(--g-controlColor--hsl), 0.5);

      &:checked {
        border-color: transparent;
        background-color: rgba(
          var(--g-alternateSelectedControlTextColor--rgb),
          0.898
        );

        &:after {
          color: var(--s-accentColor);
        }
      }
    }
  }

  > div > div > div:last-child {
    background-color: transparent !important;
  }

  // fix: remove obsolete border
  > div > div > div:last-child {
    border-right: none;
  }
}
